{"body":"Ham\r\n===\r\n\r\n*Now includes tests!*\r\n\r\n\r\nPHP Microframework for use with whatever you like. Basically just a fast router\r\nwith nice syntax, and a cache singleton. Will add more things as I go, like\r\nperhaps an extension system, autoloader and some other stuff to make developing\r\nin PHP less irritating than it currently is.\r\n\r\nRoutes are converted to regex and cached so this process does not need to\r\nhappen every request. Furthermore, the resolved route for a given URI is also\r\ncached so on most requests thare is no regex matching involved.\r\n\r\nThere is also now the ability to mount apps on routes within apps, so one could\r\nmake an administrator app, then mount it on the main app at /admin.\r\n\r\nPHP presents an interesting challenge because due to it's architecture,\r\neverything has to be re-done each request, which is why I'm leveraging caching\r\nwith tiny TTLs to share the results of operations like route resolution\r\nbetween requests.\r\n\r\nNote: PHP already has many of the features that many microframeworks have, such\r\nas session handling, cookies, and templating. An aim of this project is to\r\nencourage the use of native functionality where possible or where it is good,\r\nbut make some parts nicer or extend upon them to bring it up to scratch with\r\nthe way I like things.\r\n\r\nNote: For maximum speed gains, use the XCache extension because that supports\r\ncaching of closures, unlike APC.\r\n\r\n\r\nGoals\r\n-----\r\n\r\n * Make pretty much anything I/O related cached with XCache/APC\r\n(whichever is installed) in order to prevent excessive disk usage or path \r\nsearching on lots of requests.\r\n * Provide a succinct syntax that means less magic and less code to read\r\n through and learn, without compromising speed or code length, by using native\r\n PHP methods and features.\r\n * Promote a simple, flat way of building applications that don't need\r\n massive levels of abstraction.\r\n * Encourage use of excellent third-party libraries such as Doctrine to prevent\r\n developers writing convoluted, unmaintainable code that people like me have to\r\n pick up and spend hours poring over just to get an idea of what on earth is\r\n going on.\r\n * Define and document development patterns that allow for new developers to\r\n get up to speed quickly and write new code that isn't hacky.\r\n\r\n\r\nInspired entirely by Flask.\r\n\r\n\r\nRequirements\r\n------------\r\n\r\n* PHP 5.3\r\n* XCache (preferred) or APC (still optional)\r\n* Requests pointed at file that you put the app in (eg.\r\n  index.php).\r\n\r\n\r\nHello World\r\n-----------\r\n\r\n    require '../ham/ham.php';\r\n\r\n    $app = new Ham('example');\r\n\r\n    $app->route('/', function($app) {\r\n        return 'Hello, world!';\r\n    });\r\n\r\n    $app->run();\r\n\r\n\r\nMore Interesting Example\r\n------------------------\r\n\r\n    require '../ham/ham.php';\r\n\r\n    $app = new Ham('example');\r\n    $app->config_from_file('settings.php');\r\n\r\n    $app->route('/pork', function($app) {\r\n        return \"Delicious pork.\";\r\n    });\r\n\r\n    $hello = function($app, $name='world') {\r\n        return $app->render('hello.html', array(\r\n            'name' => $name\r\n        ));\r\n    };\r\n    $app->route('/hello/<string>', $hello);\r\n    $app->route('/', $hello);\r\n\r\n    $app->run();\r\n\r\n\r\nMultiple apps mounted on routes!\r\n--------------------------------\r\n\r\n    require '../ham/ham.php';\r\n\r\n    $beans = new Ham('beans');\r\n\r\n    $beans->route('/', function($app) {\r\n        return \"Beans home.\";\r\n    });\r\n\r\n    $beans->route('/baked', function($app) {\r\n        return \"Yum!\";\r\n    });\r\n\r\n    $app = new Ham('example');\r\n    $app->route('/', function($app) {\r\n        return \"App home.\";\r\n    });\r\n    $app->route('/beans', $beans);\r\n    $app->run();\r\n\r\n\r\nOutput: \r\n\r\n#### /beans/\r\n\r\nBeans home.\r\n\r\n#### /beans/baked\r\n\r\nYum!\r\n\r\n#### /\r\n\r\nApp home.\r\n\r\n\r\nHave a gander at the example application for more details.\r\n\r\n\r\nTo-Dos\r\n------\r\n\r\n* Nice logging class and logging support with error levels, e-mailing, etc.\r\n* Sub-application mounting (ala Flask \"Blueprints\").\r\n* Sanitisation solution.\r\n* CSRF tokens\r\n* Extension API\r\n\r\n\r\nExtension Ideas\r\n---------------\r\n\r\n* Form generation (3rd-party? Phorms)\r\n* ORM integration (most likely Doctrine)\r\n* Auth module (using scrypt or something)\r\n* Admin extension","name":"Ham","tagline":"PHP Microframework","note":"Don't delete this file! It's used internally to help with page regeneration.","google":""}